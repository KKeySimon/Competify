generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model users {
  id                   Int                     @id @default(autoincrement())
  username             String                  @unique @db.VarChar(50)
  password             String                  @db.VarChar(255)
  created_at           DateTime?               @default(now()) @db.Timestamp(6)
  email                String?                 @unique @db.VarChar(255)
  profile_picture_url  String                  @default("https://kkey-competify.s3.amazonaws.com/profile_pictures/profile_default.jpg")
  created_competitions competitions[]          @relation("CreatedCompetitions")
  joined_competitions  users_in_competitions[]

  invites_sent     invites[]     @relation("InviterRelation")
  invites_received invites[]     @relation("InviteeRelation")
  submissions      submissions[]
  events           events[]
  votes            votes[]
}

model users_in_competitions {
  user           users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int
  competition    competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade)
  competition_id Int
  joined_at      DateTime     @default(now())

  @@id([user_id, competition_id])
}

model invites {
  inviter        users        @relation("InviterRelation", fields: [inviter_id], references: [id], onDelete: Cascade)
  inviter_id     Int
  invitee        users        @relation("InviteeRelation", fields: [invitee_id], references: [id], onDelete: Cascade)
  invitee_id     Int
  competition    competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade)
  competition_id Int
  sent_at        DateTime     @default(now())

  @@id([inviter_id, invitee_id, competition_id])
}

model competitions {
  id                    Int                     @id @default(autoincrement())
  name                  String
  start_time            DateTime
  end_time              DateTime?
  // https://stackoverflow.com/questions/313417/whats-the-best-way-to-store-the-days-of-the-week-an-event-takes-place-on-in-a-r
  // days_of_week Int? Removed for now cuz it adds too much complexity
  repeats_every         Int
  frequency             Frequency?
  created_by            users                   @relation("CreatedCompetitions", fields: [user_id], references: [id], onDelete: Cascade)
  user_id               Int
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  is_numerical          Boolean
  users_in_competitions users_in_competitions[]
  invites               invites[]
  events                events[]
  priority              Priority
  policy                Policy
}

model events {
  id             Int           @id @default(autoincrement())
  competition_id Int
  belongs_to     competitions  @relation(fields: [competition_id], references: [id], onDelete: Cascade)
  date           DateTime
  winner_id      Int?
  winner         users?        @relation(fields: [winner_id], references: [id], onDelete: Cascade)
  upcoming       Boolean
  previous       Boolean       @default(false)
  // We add priority and policy to events as well as we want to preserve previous
  // priorities and policies if they're changed at some point in the future
  is_numerical   Boolean
  priority       Priority
  policy         Policy
  submissions    submissions[]
  votes          votes[]
}

model submissions {
  id              Int             @id @default(autoincrement())
  event           events          @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id        Int
  belongs_to      users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int
  created_at      DateTime        @default(now())
  content         String?
  content_number  Float?
  submission_type SubmissionType?
  votes           votes[]

  @@unique([event_id, user_id])
}

model votes {
  id            Int         @id @default(autoincrement())
  submission    submissions @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  submission_id Int
  user          users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  created_at    DateTime    @default(now())
  events        events?     @relation(fields: [eventsId], references: [id])
  eventsId      Int?

  @@unique([submission_id, user_id])
}

enum Frequency {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}

enum SubmissionType {
  TEXT
  URL
  IMAGE_URL
}

enum Priority {
  HIGHEST
  LOWEST
}

enum Policy {
  FLAT
  FLAT_CHANGE
  PERCENTAGE_CHANGE
}
