generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model users {
  id           Int            @id @default(autoincrement())
  username     String         @unique @db.VarChar(50)
  password     String         @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  email        String?        @unique @db.VarChar(255)
  createdRooms rooms[]        @relation("CreatedRooms")
  joinedRooms  usersInRooms[]

  invitesSent     invites[] @relation("InviterRelation")
  invitesReceived invites[] @relation("InviteeRelation")
}

model rooms {
  id           Int            @id @default(autoincrement())
  name         String
  createdBy    users          @relation("CreatedRooms", fields: [userId], references: [id])
  userId       Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  usersInRooms usersInRooms[]
  invites      invites[]

  @@unique([name, userId])
}

model usersInRooms {
  user     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  room     rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   Int
  joinedAt DateTime @default(now())

  @@id([userId, roomId])
}

model invites {
  inviter   users    @relation("InviterRelation", fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId Int
  invitee   users    @relation("InviteeRelation", fields: [inviteeId], references: [id], onDelete: Cascade)
  inviteeId Int
  room      rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
  sentAt    DateTime @default(now())

  @@id([inviterId, inviteeId, roomId])
}
